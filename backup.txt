// void update_birds(std::vector<std::vector<Bird>>& birds) {
//     float delta_time = GlobalData::instance().delta_time;
//     std::vector<Bird> new_birds;

//     // loop through all bird pairs
//     for (int i = 0; i < birds.size(); i++) {
//         Bird current_bird = birds[i];

//         // COHESION
//         glm::vec3 cohesion = avg_pos - current_bird.position;
//         cohesion *= BirdSimSettings::instance().cohesion_strength;

//         // ALIGNMENT + SEPERATION
//         glm::vec3 alignment_sum = glm::vec3(0.0f);
//         glm::vec3 seperation_sum = glm::vec3(0.0f);
//         glm::vec3 cohesion_sum = glm::vec3(0.0f);
//         for (int x = 0; x < birds.size(); x++) {
//             if (x == i) continue;
//             Bird other = birds[x];
//             glm::vec3 direction_away = current_bird.position -
//             other.position; float dist = glm::length(direction_away);

//             alignment_sum += other.direction / (dist + 1.0f);
//             seperation_sum += direction_away / (dist * dist + 0.1f);
//             cohesion_sum -= direction_away / (dist + 1.0f);
//         }
//         glm::vec3 alignment =
//             alignment_sum * BirdSimSettings::instance().alignment_strength;
//         glm::vec3 seperation =
//             seperation_sum * BirdSimSettings::instance().seperation_strength;
//         cohesion = cohesion_sum *
//         BirdSimSettings::instance().cohesion_strength;

//         // Noise
//         glm::vec3 noise(0.0f);
//         if (BirdSimSettings::instance().noise_strength != 0) {
//             // set new target when limit is reached
//             if (current_bird.noise_lvl >= 1.0f) {
//                 current_bird.noise_tgt1 = current_bird.noise_tgt2;
//                 current_bird.noise_tgt2.x = gen_random(-1.0f, 1.0f);
//                 current_bird.noise_tgt2.y = gen_random(-1.0f, 1.0f);
//                 current_bird.noise_lvl = 0.0f;
//             }

//             // linearly interpolate between targets
//             noise = current_bird.noise_tgt1 * (1.0f -
//             current_bird.noise_lvl); noise += current_bird.noise_tgt2 *
//             current_bird.noise_lvl; noise *=
//             BirdSimSettings::instance().noise_strength;
//             current_bird.noise_lvl +=
//                 delta_time / BirdSimSettings::instance().noise_tgt_switching;
//         }

//         // Target
//         glm::vec3 target(0.0f);
//         if (BirdSimSettings::instance().is_follow_cursor) {
//             glm::vec2 cursor_pos = get_cursor_world_pos();
//             target = glm::vec3(cursor_pos.x, cursor_pos.y, 0.0f) -
//                      current_bird.position;
//             target = glm::normalize(target);
//             target *= BirdSimSettings::instance().follow_cursor_strength;
//         }

//         // Obstacle Avoidance
//         glm::vec3 obstacles(0.0f);
//         for (const glm::vec3& point : BirdSimSettings::instance().obstacles)
//         {
//             glm::vec3 dir = current_bird.position - point;
//             float dist = glm::length(dir);
//             // distance cut-off
//             // if (dist > 2.0f) continue;

//             dir = glm::normalize(dir);
//             obstacles += dir / (dist * dist + 0.01f);
//         }
//         obstacles *= BirdSimSettings::instance().obstacle_repulsion;

//         current_bird.direction +=
//             (cohesion + alignment + seperation + noise + target + obstacles)
//             * delta_time;
//         current_bird.direction = glm::normalize(current_bird.direction);

//         new_birds.push_back(current_bird);
//     }

//     birds = new_birds;
// }